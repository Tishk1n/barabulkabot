from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import config
from create_bot import bot
from data_base.sqlite_db import *
from keyboards import kb_client, kb_phone
from states.order import FSMZakazat


async def command_start(message: types.Message):
    base = Users.get_or_none(Users.id == message.from_user.id)

    await bot.send_sticker(message.from_user.id,
                           'CAACAgIAAxkBAAEFmbxi_mQLsxaVWhHPyhKCr2ZeCvlGmgACKAADKA9qFJBLt8sebwMQKQQ')
    if base is None:
        Users.create(id=message.from_user.id)
        await bot.send_message(message.from_user.id,
                               'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\!*\n\n–ú—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –≤ –≤–∏–Ω–Ω–æ–º –¥–µ–ª–µ –∏ —Ä–µ—à–∏–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ '
                               '–æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ñ–∏–ª–∏–∞–ª—ã –≤–æ –≤—Å–µ–º–∏ –ª—é–±–∏–º–æ–º Telegram\!',
                               reply_markup=kb_client)
    else:
        await bot.send_message(message.from_user.id, 'üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º\!*', reply_markup=kb_client)


async def pizza_open_commmand(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           'CAACAgEAAxkBAAEFmqdi_0sz-Cb-PVM2q8cm6apEyaJBHAACxQEAAkpieUUwa86ewMXfASkE')
    await bot.send_message(message.from_user.id, 'ü•∞ *–ü–Ω\-–ü—Ç: 11:00 –¥–æ 22:00*')


async def pizza_place_commmand(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           'CAACAgEAAxkBAAEFmqBi_0on_nzuaT5wLDGVyzRm0xYGagACfQIAAjPfcUW7Yzvacs97JCkE')
    await bot.send_message(message.from_user.id, '–ú–æ—Å–∫–≤–∞, —É–ª\. –ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è –ù–∏–∂–Ω—è—è, –¥\. 35, —Å—Ç—Ä\. 5, –ø–æ–º–µ—â–µ–Ω–∏–µ 7')


async def pizza_tel_commmand(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           'CAACAgEAAxkBAAEFmp5i_0lD3MUFYbExV-0OIR4n_F4AARYAAhoCAAIde6FGQHoZrVFtNN8pBA')
    await bot.send_message(message.from_user.id, '‚òéÔ∏è *–ù–∞—à–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: \n\+79884014330 \n\n\+79852555176*')


async def pizza_menu_command(message: types.Message):
    sql = Products.select().execute()

    kb = InlineKeyboardMarkup(row_width=2)
    [kb.add(InlineKeyboardButton(text=product.name, callback_data='product_' + str(product.id))) for product in sql]
    await bot.send_message(message.from_user.id, 'üç∑ *–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤:*', reply_markup=kb)


async def pizza_cart_command(message: types.Message):
    sql = Orders.select().where(Orders.user_id == message.from_user.id).execute()

    kb = InlineKeyboardMarkup(row_width=2)
    for order in sql:
        product = Products.get(Products.id == int(order.product_id))
        kb.add(InlineKeyboardButton(text=product.name, callback_data='order_' + str(order.product_id)))

    kb.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='cart_confirm'))

    await bot.send_message(message.from_user.id, 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*', reply_markup=kb)


async def handler_call(call: types.CallbackQuery, state: FSMContext):
    if call.data.startswith('product_'):
        product = Products.get(Products.id == int(call.data.split('product_', maxsplit=1)[1]))

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(text=f'üí≥ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                    callback_data=f'cart_' + call.data.split('product_', maxsplit=1)[1]))
        kb.add(InlineKeyboardButton(text=f'‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancel'))
        await call.message.delete()
        await bot.send_photo(call.from_user.id, product.photo,
                             f'üìÉ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product.name}\nüè∑ *–¶–µ–Ω–∞:* {product.price} RUB\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{product.description}'.replace('.', '\.'),
                             reply_markup=kb)

    elif call.data.startswith('cart_') and not call.data.startswith('cart_count_') and not call.data.startswith(
            'cart_confirm'):
        Orders.create(user_id=call.from_user.id, product_id=int(call.data.split('cart_', maxsplit=1)[1]), count=1,
                      status=3)
        await call.answer(text=f'‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –µ—ë.')
        await call.message.delete()

    elif call.data.startswith('order_'):
        order = Orders.get(Orders.product_id == int(call.data.split('order_', maxsplit=1)[1]),
                           Orders.user_id == call.from_user.id)
        product = Products.get(Products.id == order.product_id)

        kb = InlineKeyboardMarkup(row_width=3)
        kb.add(InlineKeyboardButton(text=f' ', callback_data=f'space'),
               InlineKeyboardButton(text=f'üîù', callback_data=f'cart'),
               InlineKeyboardButton(text=f' ', callback_data=f'space'))
        kb.add(InlineKeyboardButton(text=f'üî∫', callback_data=f'cart_count_' + str(order.product_id) + '_+1'),
               InlineKeyboardButton(text=f'1', callback_data=f'1'),
               InlineKeyboardButton(text=f'üîª', callback_data=f'cart_count_' + str(order.product_id) + '_-1'))
        kb.add(InlineKeyboardButton(text=f'üî∫', callback_data=f'cart_count_' + str(order.product_id) + '_+10'),
               InlineKeyboardButton(text=f'10', callback_data=f'10'),
               InlineKeyboardButton(text=f'üîª', callback_data=f'cart_count_' + str(order.product_id) + '_-10'))
        kb.add(InlineKeyboardButton(text=f' ', callback_data=f'space'),
               InlineKeyboardButton(text=f'‚ùå', callback_data=f'cancel_order_' + str(order.product_id)),
               InlineKeyboardButton(text=f' ', callback_data=f'space'))
        await call.message.delete()
        await bot.send_photo(call.from_user.id, product.photo,
                             f'üìÉ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product.name}\nüè∑ *–¶–µ–Ω–∞:* {product.price} RUB\nüì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ:* {order.count}\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{product.description}'.replace('.', '\.'),
                             reply_markup=kb)

    elif call.data.startswith('cart_count_'):
        order = Orders.get(Orders.product_id == int(call.data.split('cart_count_', maxsplit=1)[1].split('_')[0]),
                           Orders.user_id == call.from_user.id)
        order.count = eval(
            'order.count ' + call.data.split('cart_count_', maxsplit=1)[1].split('_')[1] + ' if order.count ' +
            call.data.split('cart_count_', maxsplit=1)[1].split('_')[1] + ' > 0 else 1')
        order.save()
        product = Products.get(Products.id == order.product_id)

        kb = InlineKeyboardMarkup(row_width=3)
        kb.add(InlineKeyboardButton(text=f'üî∫', callback_data=f'cart_count_' + str(order.product_id) + '_+1'),
               InlineKeyboardButton(text=f'1', callback_data=f'1'),
               InlineKeyboardButton(text=f'üîª', callback_data=f'cart_count_' + str(order.product_id) + '_-1'))
        kb.add(InlineKeyboardButton(text=f'üî∫', callback_data=f'cart_count_' + str(order.product_id) + '_+10'),
               InlineKeyboardButton(text=f'10', callback_data=f'10'),
               InlineKeyboardButton(text=f'üîª', callback_data=f'cart_count_' + str(order.product_id) + '_-10'))
        kb.add(InlineKeyboardButton(text=f' ', callback_data=f'space'),
               InlineKeyboardButton(text=f'‚ùå', callback_data=f'cancel_order_' + str(order.product_id)),
               InlineKeyboardButton(text=f' ', callback_data=f'space'))
        await call.message.delete()
        await bot.send_photo(call.from_user.id, product.photo,
                             f'üìÉ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product.name}\nüè∑ *–¶–µ–Ω–∞:* {product.price} RUB\nüì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ:* {order.count}\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{product.description}'.replace('.', '\.'),
                             reply_markup=kb)

    elif call.data.startswith('cancel_order_'):
        Orders.delete().where(Orders.product_id == int(call.data.split('cancel_order_', maxsplit=1)[1]),
                              Orders.user_id == call.from_user.id).execute()
        await call.answer(text=f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
        await call.message.delete()

    elif call.data.startswith('delete_'):
        if call.from_user.id in config.admins:
            Products.delete().where(Products.id == int(call.data.split('delete_', maxsplit=1)[1])).execute()
            await call.answer(text=f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω.')
            await call.message.delete()

    elif call.data.startswith('confirm_'):
        if call.from_user.id in config.admins:
            Orders.delete().where(Orders.user_id == int(call.data.split('confirm_', maxsplit=1)[1])).execute()
            await call.answer(text=f'‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.')
            await bot.send_message(int(call.data.split('confirm_', maxsplit=1)[1]), '‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç\!*')

    elif call.data.startswith('unconfirm_'):
        if call.from_user.id in config.admins:
            Orders.delete().where(Orders.user_id == int(call.data.split('unconfirm_', maxsplit=1)[1])).execute()
            await call.answer(text=f'‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.')
            await bot.send_message(int(call.data.split('confirm_', maxsplit=1)[1]), '‚ùå *–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω!*')

    elif call.data == 'cancel':
        await call.answer(text=f'‚úÖ –£—Å–ø–µ—à–Ω–æ!')
        await call.message.delete()

    elif call.data == 'cart':
        await call.message.delete()

    elif call.data == 'cart_confirm':
        sql = Orders.select().where(Orders.user_id == call.from_user.id).execute()

        text = ''
        total = 0.0

        for order in sql:
            product = Products.get(Products.id == int(order.product_id))
            order_price = product.price * order.count
            text += f'\n‚Ä¢ {product.name} \({order.count} —à—Ç.\) \‚Äî {order_price} RUB'

            total += order_price

        if len(sql) > 0:
            await call.message.delete()

            await bot.send_message(call.from_user.id, f'üõç *–ö –ø–æ–∫—É–ø–∫–µ:*\n{text}\n\n*–ò—Ç–æ–≥–æ:* {total} RUB'.replace('.', '\.'))
            await bot.send_message(call.from_user.id, f'üì≤ *–î–ª—è –ø—Ä–æ–¥–æ–∂–Ω–µ–Ω–∏—è, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º*',
                                   reply_markup=kb_phone)

            await FSMZakazat.phone.set()

        else:
            await call.answer(text=f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòî')


async def pizza_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cont'] = message.contact.phone_number

        sql = Orders.select().where(Orders.user_id == message.from_user.id).execute()

        text = ''
        total = 0.0

        for order in sql:
            product = Products.get(Products.id == int(order.product_id))
            order_price = product.price * order.count
            text += f'\n‚Ä¢ {product.name} ({order.count} —à—Ç.) ‚Äî {order_price} RUB'

            total += order_price

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(text=f'‚úÖ –ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm_' + str(message.from_user.id)))
        kb.add(InlineKeyboardButton(text=f'‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'unconfirm_' + str(message.from_user.id)))

        [await bot.send_message(id,
                                f'üì© <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüôé‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.mention}\n{text}\n\n'
                                f'<b>–ò—Ç–æ–≥–æ:</b> {total} RUB\n<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω:</b> {data["cont"]}',
                                parse_mode='html', reply_markup=kb) for id in config.admins]

    await state.finish()
    await bot.send_sticker(message.from_user.id,
                           'CAACAgEAAxkBAAEFmqti_05DWW1Le-6jl03F5yi3_BPB5gACvAIAAuL8qUZrkJT2k8fvRikE')
    await bot.send_message(message.from_user.id, '‚úÖ *–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–æ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞\!*',
                           reply_markup=kb_client)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(command_start, text=['üîù –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'])
    dp.register_message_handler(pizza_open_commmand, text=['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã üìÜ'])
    dp.register_message_handler(pizza_place_commmand, text=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ üèô'])
    dp.register_message_handler(pizza_tel_commmand, text=['–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è'])
    dp.register_message_handler(pizza_menu_command, text=['–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç üç∑'])
    dp.register_message_handler(pizza_cart_command, text=['–ö–æ—Ä–∑–∏–Ω–∞ üõí'])
    dp.register_message_handler(pizza_count, content_types=['contact'], state=FSMZakazat.phone)
    dp.register_callback_query_handler(handler_call)
